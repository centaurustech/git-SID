<?php

// Data functions for table entries

// This script and data application were generated by AppGini 5.23
// Download AppGini for free from http://bigprof.com/appgini/download/

function entries_insert(){
	global $Translation;

	if($_GET['insert_x']!=''){$_POST=$_GET;}

	// mm: can member insert record?
	$arrPerm=getTablePermissions('entries');
	if(!$arrPerm[1]){
		return false;
	}

	$data['created'] = parseCode('<%%creationDate%%>', true, true);
	$data['created_by'] = parseCode('<%%creatorUsername%%>', true);
	$data['report'] = makeSafe($_POST['report']);
		if($data['report'] == empty_lookup_value){ $data['report'] = ''; }
	$data['outcome_area'] = makeSafe($_POST['outcome']);
		if($data['outcome_area'] == empty_lookup_value){ $data['outcome_area'] = ''; }
	$data['outcome'] = makeSafe($_POST['outcome']);
		if($data['outcome'] == empty_lookup_value){ $data['outcome'] = ''; }
	$data['indicator'] = makeSafe($_POST['indicator']);
		if($data['indicator'] == empty_lookup_value){ $data['indicator'] = ''; }
	$data['score'] = makeSafe($_POST['score']);
		if($data['score'] == empty_lookup_value){ $data['score'] = ''; }
	$data['beneficiary_group'] = makeSafe($_POST['beneficiary_group']);
		if($data['beneficiary_group'] == empty_lookup_value){ $data['beneficiary_group'] = ''; }
	$data['beneficiary_group_relevance'] = makeSafe($_POST['beneficiary_group_relevance']);
		if($data['beneficiary_group_relevance'] == empty_lookup_value){ $data['beneficiary_group_relevance'] = ''; }
	$data['comment'] = br2nl(makeSafe($_POST['comment']));
	$data['reference'] = makeSafe($_POST['reference']);
		if($data['reference'] == empty_lookup_value){ $data['reference'] = ''; }
	$data['reliability'] = makeSafe($_POST['reliability']);
		if($data['reliability'] == empty_lookup_value){ $data['reliability'] = ''; }
	$data['intentionality'] = makeSafe($_POST['intentionality']);
		if($data['intentionality'] == empty_lookup_value){ $data['intentionality'] = ''; }
	$data['equivalence'] = makeSafe($_POST['equivalence']);
		if($data['equivalence'] == empty_lookup_value){ $data['equivalence'] = ''; }
	if($data['report']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Report': " . $Translation['field not null'] . '<br /><br />';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}

	// hook: entries_before_insert
	if(function_exists('entries_before_insert')){
		$args=array();
		if(!entries_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('insert into `entries` set       `created`=' . "'{$data['created']}'" . ', `created_by`=' . "'{$data['created_by']}'" . ', `report`=' . (($data['report'] !== '' && $data['report'] !== NULL) ? "'{$data['report']}'" : 'NULL') . ', `outcome_area`=' . (($data['outcome_area'] !== '' && $data['outcome_area'] !== NULL) ? "'{$data['outcome_area']}'" : 'NULL') . ', `outcome`=' . (($data['outcome'] !== '' && $data['outcome'] !== NULL) ? "'{$data['outcome']}'" : 'NULL') . ', `indicator`=' . (($data['indicator'] !== '' && $data['indicator'] !== NULL) ? "'{$data['indicator']}'" : 'NULL') . ', `score`=' . (($data['score'] !== '' && $data['score'] !== NULL) ? "'{$data['score']}'" : 'NULL') . ', `beneficiary_group`=' . (($data['beneficiary_group'] !== '' && $data['beneficiary_group'] !== NULL) ? "'{$data['beneficiary_group']}'" : 'NULL') . ', `beneficiary_group_relevance`=' . (($data['beneficiary_group_relevance'] !== '' && $data['beneficiary_group_relevance'] !== NULL) ? "'{$data['beneficiary_group_relevance']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `reference`=' . (($data['reference'] !== '' && $data['reference'] !== NULL) ? "'{$data['reference']}'" : 'NULL') . ', `reliability`=' . (($data['reliability'] !== '' && $data['reliability'] !== NULL) ? "'{$data['reliability']}'" : 'NULL') . ', `intentionality`=' . (($data['intentionality'] !== '' && $data['intentionality'] !== NULL) ? "'{$data['intentionality']}'" : 'NULL') . ', `equivalence`=' . (($data['equivalence'] !== '' && $data['equivalence'] !== NULL) ? "'{$data['equivalence']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"entries_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID=mysql_insert_id();

	// hook: entries_after_insert
	if(function_exists('entries_after_insert')){
		$res = sql("select * from `entries` where `entry_id`='" . makeSafe($recID) . "' limit 1", $eo);
		if($row = mysql_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID);
		$args=array();
		if(!entries_after_insert($data, getMemberInfo(), $args)){ return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID); }
	}

	// mm: save ownership data
	sql("insert into membership_userrecords set tableName='entries', pkValue='$recID', memberID='".getLoggedMemberID()."', dateAdded='".time()."', dateUpdated='".time()."', groupID='".getLoggedGroupID()."'", $eo);

	return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID);
}

function entries_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('entries');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='entries' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='entries' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: entries_before_delete
	if(function_exists('entries_before_delete')){
		$args=array();
		if(!entries_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	sql("delete from `entries` where `entry_id`='$selected_id'", $eo);

	// hook: entries_after_delete
	if(function_exists('entries_after_delete')){
		$args=array();
		entries_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='entries' and pkValue='$selected_id'", $eo);
}

function entries_update($selected_id){
	global $Translation;

	if($_GET['update_x']!=''){$_POST=$_GET;}

	// mm: can member edit record?
	$arrPerm=getTablePermissions('entries');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='entries' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='entries' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['created'] = parseMySQLDate('', '<%%creationDate%%>');
	$data['report'] = makeSafe($_POST['report']);
		if($data['report'] == empty_lookup_value){ $data['report'] = ''; }
	if($data['report']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Report': {$Translation['field not null']}<br /><br />";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['outcome_area'] = makeSafe($_POST['outcome']);
		if($data['outcome_area'] == empty_lookup_value){ $data['outcome_area'] = ''; }
	$data['outcome'] = makeSafe($_POST['outcome']);
		if($data['outcome'] == empty_lookup_value){ $data['outcome'] = ''; }
	$data['indicator'] = makeSafe($_POST['indicator']);
		if($data['indicator'] == empty_lookup_value){ $data['indicator'] = ''; }
	$data['score'] = makeSafe($_POST['score']);
		if($data['score'] == empty_lookup_value){ $data['score'] = ''; }
	$data['beneficiary_group'] = makeSafe($_POST['beneficiary_group']);
		if($data['beneficiary_group'] == empty_lookup_value){ $data['beneficiary_group'] = ''; }
	$data['beneficiary_group_relevance'] = makeSafe($_POST['beneficiary_group_relevance']);
		if($data['beneficiary_group_relevance'] == empty_lookup_value){ $data['beneficiary_group_relevance'] = ''; }
	$data['comment'] = br2nl(makeSafe($_POST['comment']));
	$data['reference'] = makeSafe($_POST['reference']);
		if($data['reference'] == empty_lookup_value){ $data['reference'] = ''; }
	$data['reliability'] = makeSafe($_POST['reliability']);
		if($data['reliability'] == empty_lookup_value){ $data['reliability'] = ''; }
	$data['intentionality'] = makeSafe($_POST['intentionality']);
		if($data['intentionality'] == empty_lookup_value){ $data['intentionality'] = ''; }
	$data['equivalence'] = makeSafe($_POST['equivalence']);
		if($data['equivalence'] == empty_lookup_value){ $data['equivalence'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: entries_before_update
	if(function_exists('entries_before_update')){
		$args=array();
		if(!entries_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `entries` set       `created`=' . (($data['created'] != '') ? "'{$data['created']}'" : 'NULL') . ', `report`=' . (($data['report'] !== '' && $data['report'] !== NULL) ? "'{$data['report']}'" : 'NULL') . ', `outcome_area`=' . (($data['outcome_area'] !== '' && $data['outcome_area'] !== NULL) ? "'{$data['outcome_area']}'" : 'NULL') . ', `outcome`=' . (($data['outcome'] !== '' && $data['outcome'] !== NULL) ? "'{$data['outcome']}'" : 'NULL') . ', `indicator`=' . (($data['indicator'] !== '' && $data['indicator'] !== NULL) ? "'{$data['indicator']}'" : 'NULL') . ', `score`=' . (($data['score'] !== '' && $data['score'] !== NULL) ? "'{$data['score']}'" : 'NULL') . ', `beneficiary_group`=' . (($data['beneficiary_group'] !== '' && $data['beneficiary_group'] !== NULL) ? "'{$data['beneficiary_group']}'" : 'NULL') . ', `beneficiary_group_relevance`=' . (($data['beneficiary_group_relevance'] !== '' && $data['beneficiary_group_relevance'] !== NULL) ? "'{$data['beneficiary_group_relevance']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `reference`=' . (($data['reference'] !== '' && $data['reference'] !== NULL) ? "'{$data['reference']}'" : 'NULL') . ', `reliability`=' . (($data['reliability'] !== '' && $data['reliability'] !== NULL) ? "'{$data['reliability']}'" : 'NULL') . ', `intentionality`=' . (($data['intentionality'] !== '' && $data['intentionality'] !== NULL) ? "'{$data['intentionality']}'" : 'NULL') . ', `equivalence`=' . (($data['equivalence'] !== '' && $data['equivalence'] !== NULL) ? "'{$data['equivalence']}'" : 'NULL') . " where `entry_id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="entries_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: entries_after_update
	if(function_exists('entries_after_update')){
		$res = sql("SELECT * FROM `entries` WHERE `entry_id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = mysql_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['entry_id'];
		$args = array();
		if(!entries_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='entries' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function entries_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('entries');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_report = thisOr(undo_magic_quotes($_REQUEST['filterer_report']), '');
	$filterer_outcome = thisOr(undo_magic_quotes($_REQUEST['filterer_outcome']), '');
	$filterer_indicator = thisOr(undo_magic_quotes($_REQUEST['filterer_indicator']), '');
	$filterer_beneficiary_group = thisOr(undo_magic_quotes($_REQUEST['filterer_beneficiary_group']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_indicator && !$filterer_outcome) $filterer_outcome = sqlValue("select outcome from indicators where indicator_id='" . makeSafe($filterer_indicator) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: created
	$combo_created = new DateCombo;
	$combo_created->DateFormat = "dmy";
	$combo_created->MinYear = 1900;
	$combo_created->MaxYear = 2100;
	$combo_created->DefaultDate = parseMySQLDate('<%%creationDate%%>', '<%%creationDate%%>');
	$combo_created->MonthNames = $Translation['month names'];
	$combo_created->NamePrefix = 'created';
	// combobox: report
	$combo_report = new DataCombo;
	// combobox: outcome
	$combo_outcome = new DataCombo;
	// combobox: indicator, filterable by: outcome
	$combo_indicator = new DataCombo;
	// combobox: beneficiary_group
	$combo_beneficiary_group = new DataCombo;
	// combobox: beneficiary_group_relevance
	$combo_beneficiary_group_relevance = new Combo;
	$combo_beneficiary_group_relevance->ListType = 0;
	$combo_beneficiary_group_relevance->MultipleSeparator = ', ';
	$combo_beneficiary_group_relevance->ListBoxHeight = 10;
	$combo_beneficiary_group_relevance->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/entries.beneficiary_group_relevance.csv')){
		$beneficiary_group_relevance_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/entries.beneficiary_group_relevance.csv')));
		$combo_beneficiary_group_relevance->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($beneficiary_group_relevance_data)));
		$combo_beneficiary_group_relevance->ListData = $combo_beneficiary_group_relevance->ListItem;
	}else{
		$combo_beneficiary_group_relevance->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("1;;2;;3;;4;;5")));
		$combo_beneficiary_group_relevance->ListData = $combo_beneficiary_group_relevance->ListItem;
	}
	$combo_beneficiary_group_relevance->SelectName = 'beneficiary_group_relevance';
	// combobox: reliability
	$combo_reliability = new Combo;
	$combo_reliability->ListType = 0;
	$combo_reliability->MultipleSeparator = ', ';
	$combo_reliability->ListBoxHeight = 10;
	$combo_reliability->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/entries.reliability.csv')){
		$reliability_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/entries.reliability.csv')));
		$combo_reliability->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($reliability_data)));
		$combo_reliability->ListData = $combo_reliability->ListItem;
	}else{
		$combo_reliability->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("1;;2;;3;;4;;5")));
		$combo_reliability->ListData = $combo_reliability->ListItem;
	}
	$combo_reliability->SelectName = 'reliability';
	// combobox: intentionality
	$combo_intentionality = new Combo;
	$combo_intentionality->ListType = 0;
	$combo_intentionality->MultipleSeparator = ', ';
	$combo_intentionality->ListBoxHeight = 10;
	$combo_intentionality->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/entries.intentionality.csv')){
		$intentionality_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/entries.intentionality.csv')));
		$combo_intentionality->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($intentionality_data)));
		$combo_intentionality->ListData = $combo_intentionality->ListItem;
	}else{
		$combo_intentionality->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("1;;2;;3;;4;;5")));
		$combo_intentionality->ListData = $combo_intentionality->ListItem;
	}
	$combo_intentionality->SelectName = 'intentionality';
	// combobox: equivalence
	$combo_equivalence = new Combo;
	$combo_equivalence->ListType = 0;
	$combo_equivalence->MultipleSeparator = ', ';
	$combo_equivalence->ListBoxHeight = 10;
	$combo_equivalence->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/entries.equivalence.csv')){
		$equivalence_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/entries.equivalence.csv')));
		$combo_equivalence->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($equivalence_data)));
		$combo_equivalence->ListData = $combo_equivalence->ListItem;
	}else{
		$combo_equivalence->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("1;;2;;3;;4;;5")));
		$combo_equivalence->ListData = $combo_equivalence->ListItem;
	}
	$combo_equivalence->SelectName = 'equivalence';

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='entries' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='entries' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `entries` where `entry_id`='".makeSafe($selected_id)."'", $eo);
		$row = mysql_fetch_array($res);
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_created->DefaultDate = $row['created'];
		$combo_report->SelectedData = $row['report'];
		$combo_outcome->SelectedData = $row['outcome'];
		$combo_indicator->SelectedData = $row['indicator'];
		$combo_beneficiary_group->SelectedData = $row['beneficiary_group'];
		$combo_beneficiary_group_relevance->SelectedData = $row['beneficiary_group_relevance'];
		$combo_reliability->SelectedData = $row['reliability'];
		$combo_intentionality->SelectedData = $row['intentionality'];
		$combo_equivalence->SelectedData = $row['equivalence'];
	}else{
		$combo_report->SelectedData = $filterer_report;
		$combo_outcome->SelectedData = $filterer_outcome;
		$combo_indicator->SelectedData = $filterer_indicator;
		$combo_beneficiary_group->SelectedData = $filterer_beneficiary_group;
		$combo_beneficiary_group_relevance->SelectedText = ( $_REQUEST['FilterField'][1]=='10' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_reliability->SelectedText = ( $_REQUEST['FilterField'][1]=='13' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_intentionality->SelectedText = ( $_REQUEST['FilterField'][1]=='14' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_equivalence->SelectedText = ( $_REQUEST['FilterField'][1]=='15' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
	}
	$combo_report->HTML = $combo_report->MatchText = '<span id="report-container' . $rnd1 . '"></span><input type="hidden" name="report" id="report' . $rnd1 . '">';
	$combo_outcome->HTML = $combo_outcome->MatchText = '<span id="outcome-container' . $rnd1 . '"></span><input type="hidden" name="outcome" id="outcome' . $rnd1 . '">';
	$combo_indicator->HTML = $combo_indicator->MatchText = '<span id="indicator-container' . $rnd1 . '"></span><input type="hidden" name="indicator" id="indicator' . $rnd1 . '">';
	$combo_beneficiary_group->HTML = $combo_beneficiary_group->MatchText = '<span id="beneficiary_group-container' . $rnd1 . '"></span><input type="hidden" name="beneficiary_group" id="beneficiary_group' . $rnd1 . '">';
	$combo_beneficiary_group_relevance->Render();
	$combo_reliability->Render();
	$combo_intentionality->Render();
	$combo_equivalence->Render();

	ob_start();
	?>

	<script>
		// initial lookup values
		var current_report__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['report'] : $filterer_report); ?>"};
		var current_outcome__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['outcome'] : $filterer_outcome); ?>"};
		var current_indicator__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['indicator'] : $filterer_indicator); ?>"};
		var current_beneficiary_group__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['beneficiary_group'] : $filterer_beneficiary_group); ?>"};
		
		jQuery(function() {
			report_reload__RAND__();
			outcome_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'indicator_reload__RAND__(current_outcome__RAND__.value);' : ''); ?>
			beneficiary_group_reload__RAND__();
		});
		function report_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#report-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_report__RAND__.value, t: 'entries', f: 'report' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="report"]').val(resp.results[0].id);


						if(typeof(report_update_autofills__RAND__) == 'function') report_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'entries', f: 'report' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_report__RAND__.value = e.added.id;
				current_report__RAND__.text = e.added.text;
				jQuery('[name="report"]').val(e.added.id);


				if(typeof(report_update_autofills__RAND__) == 'function') report_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_report__RAND__.value, t: 'entries', f: 'report' }
			}).done(function(resp){
				jQuery('#report-container__RAND__').html('<span id="report-match-text">' + resp.results[0].text + '</span>');

				if(typeof(report_update_autofills__RAND__) == 'function') report_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function outcome_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#outcome-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_outcome__RAND__.value, t: 'entries', f: 'outcome' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="outcome"]').val(resp.results[0].id);

						indicator_reload__RAND__(current_outcome__RAND__.value);

						if(typeof(outcome_update_autofills__RAND__) == 'function') outcome_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'entries', f: 'outcome' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_outcome__RAND__.value = e.added.id;
				current_outcome__RAND__.text = e.added.text;
				jQuery('[name="outcome"]').val(e.added.id);

						indicator_reload__RAND__(current_outcome__RAND__.value);

				if(typeof(outcome_update_autofills__RAND__) == 'function') outcome_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_outcome__RAND__.value, t: 'entries', f: 'outcome' }
			}).done(function(resp){
				jQuery('#outcome-container__RAND__').html('<span id="outcome-match-text">' + resp.results[0].text + '</span>');

				if(typeof(outcome_update_autofills__RAND__) == 'function') outcome_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function indicator_reload__RAND__(filterer_outcome){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#indicator-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_outcome: filterer_outcome, id: current_indicator__RAND__.value, t: 'entries', f: 'indicator' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="indicator"]').val(resp.results[0].id);


						if(typeof(indicator_update_autofills__RAND__) == 'function') indicator_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_outcome: filterer_outcome, s: term, p: page, t: 'entries', f: 'indicator' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_indicator__RAND__.value = e.added.id;
				current_indicator__RAND__.text = e.added.text;
				jQuery('[name="indicator"]').val(e.added.id);


				if(typeof(indicator_update_autofills__RAND__) == 'function') indicator_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_indicator__RAND__.value, t: 'entries', f: 'indicator' }
			}).done(function(resp){
				jQuery('#indicator-container__RAND__').html('<span id="indicator-match-text">' + resp.results[0].text + '</span>');

				if(typeof(indicator_update_autofills__RAND__) == 'function') indicator_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function beneficiary_group_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#beneficiary_group-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_beneficiary_group__RAND__.value, t: 'entries', f: 'beneficiary_group' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="beneficiary_group"]').val(resp.results[0].id);


						if(typeof(beneficiary_group_update_autofills__RAND__) == 'function') beneficiary_group_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'entries', f: 'beneficiary_group' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_beneficiary_group__RAND__.value = e.added.id;
				current_beneficiary_group__RAND__.text = e.added.text;
				jQuery('[name="beneficiary_group"]').val(e.added.id);


				if(typeof(beneficiary_group_update_autofills__RAND__) == 'function') beneficiary_group_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_beneficiary_group__RAND__.value, t: 'entries', f: 'beneficiary_group' }
			}).done(function(resp){
				jQuery('#beneficiary_group-container__RAND__').html('<span id="beneficiary_group-match-text">' + resp.results[0].text + '</span>');

				if(typeof(beneficiary_group_update_autofills__RAND__) == 'function') beneficiary_group_update_autofills__RAND__();
			});
		<?php } ?>

		}
	</script>
	<?php
	
	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$templateCode = @file_get_contents('./templates/entries_templateDVP.html');
	}else{
		$templateCode = @file_get_contents('./templates/entries_templateDV.html');
	}

	// process form title
	$templateCode=str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Entry details', $templateCode);
	$templateCode=str_replace('<%%RND1%%>', $rnd1, $templateCode);
	// process buttons
	if($arrPerm[1]){ // allow insert?
		if(!$selected_id) $templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return entries_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return entries_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'window.parent.jQuery(\'.modal\').modal(\'hide\'); return false;';
	}else{
		$backAction = '$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode=str_replace('<%%DVPRINT_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return entries_validateData();"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', '<button tabindex="2" type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button tabindex="2" type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$arrPerm[1]) || (!$selected_id && !$arrPerm[1])){
		$jsReadOnly .= "\tjQuery('#report').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#report_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#outcome').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#outcome_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#indicator').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#indicator_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#score').replaceWith('<p class=\"form-control-static\" id=\"score\">' + (jQuery('#score').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#beneficiary_group').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#beneficiary_group_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#beneficiary_group_relevance').replaceWith('<p class=\"form-control-static\" id=\"beneficiary_group_relevance\">' + (jQuery('#beneficiary_group_relevance').val() || '') + '</p>'); jQuery('#beneficiary_group_relevance-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#comment').replaceWith('<p class=\"form-control-static\" id=\"comment\">' + (jQuery('#comment').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#reference').replaceWith('<p class=\"form-control-static\" id=\"reference\">' + (jQuery('#reference').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#reliability').replaceWith('<p class=\"form-control-static\" id=\"reliability\">' + (jQuery('#reliability').val() || '') + '</p>'); jQuery('#reliability-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#intentionality').replaceWith('<p class=\"form-control-static\" id=\"intentionality\">' + (jQuery('#intentionality').val() || '') + '</p>'); jQuery('#intentionality-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#equivalence').replaceWith('<p class=\"form-control-static\" id=\"equivalence\">' + (jQuery('#equivalence').val() || '') + '</p>'); jQuery('#equivalence-multi-selection-help').hide();\n";

		$noUploads = true;
	}

	// process combos
	$templateCode=str_replace('<%%COMBO(created)%%>', ($selected_id && !$arrPerm[3] ? '<p class="form-control-static">' . $combo_created->GetHTML(true) . '</p>' : $combo_created->GetHTML()), $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(created)%%>', $combo_created->GetHTML(true), $templateCode);
	$templateCode=str_replace('<%%COMBO(report)%%>', $combo_report->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(report)%%>', $combo_report->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(report)%%>', urlencode($combo_report->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(outcome)%%>', $combo_outcome->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(outcome)%%>', $combo_outcome->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(outcome)%%>', urlencode($combo_outcome->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(indicator)%%>', $combo_indicator->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(indicator)%%>', $combo_indicator->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(indicator)%%>', urlencode($combo_indicator->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(beneficiary_group)%%>', $combo_beneficiary_group->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(beneficiary_group)%%>', $combo_beneficiary_group->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(beneficiary_group)%%>', urlencode($combo_beneficiary_group->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(beneficiary_group_relevance)%%>', $combo_beneficiary_group_relevance->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(beneficiary_group_relevance)%%>', $combo_beneficiary_group_relevance->SelectedData, $templateCode);
	$templateCode=str_replace('<%%COMBO(reliability)%%>', $combo_reliability->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(reliability)%%>', $combo_reliability->SelectedData, $templateCode);
	$templateCode=str_replace('<%%COMBO(intentionality)%%>', $combo_intentionality->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(intentionality)%%>', $combo_intentionality->SelectedData, $templateCode);
	$templateCode=str_replace('<%%COMBO(equivalence)%%>', $combo_equivalence->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(equivalence)%%>', $combo_equivalence->SelectedData, $templateCode);

	// process foreign key links
	if($selected_id){
		$templateCode=str_replace('<%%PLINK(report)%%>', ($combo_report->SelectedData ? "<span id=\"reports_plink1\" class=\"hidden\"><a class=\"btn btn-default\" href=\"reports_view.php?SelectedID=" . urlencode($combo_report->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(outcome)%%>', ($combo_outcome->SelectedData ? "<span id=\"outcomes_plink2\" class=\"hidden\"><a class=\"btn btn-default\" href=\"outcomes_view.php?SelectedID=" . urlencode($combo_outcome->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(indicator)%%>', ($combo_indicator->SelectedData ? "<span id=\"indicators_plink3\" class=\"hidden\"><a class=\"btn btn-default\" href=\"indicators_view.php?SelectedID=" . urlencode($combo_indicator->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(beneficiary_group)%%>', ($combo_beneficiary_group->SelectedData ? "<span id=\"beneficiary_groups_plink4\" class=\"hidden\"><a class=\"btn btn-default\" href=\"beneficiary_groups_view.php?SelectedID=" . urlencode($combo_beneficiary_group->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
	}

	// process images
	$templateCode=str_replace('<%%UPLOADFILE(entry_id)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(created)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(created_by)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(report)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(outcome)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(indicator)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(score)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(beneficiary_group)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(beneficiary_group_relevance)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(comment)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(reference)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(reliability)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(intentionality)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(equivalence)%%>', '', $templateCode);

	// process values
	if($selected_id){
		$templateCode=str_replace('<%%VALUE(entry_id)%%>', htmlspecialchars($row['entry_id'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(entry_id)%%>', urlencode($urow['entry_id']), $templateCode);
		$templateCode=str_replace('<%%VALUE(created)%%>', @date('d/m/Y', @strtotime(htmlspecialchars($row['created'], ENT_QUOTES))), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(created)%%>', urlencode(@date('d/m/Y', @strtotime(htmlspecialchars($urow['created'], ENT_QUOTES)))), $templateCode);
		$templateCode=str_replace('<%%VALUE(created_by)%%>', htmlspecialchars($row['created_by'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(created_by)%%>', urlencode($urow['created_by']), $templateCode);
		$templateCode=str_replace('<%%VALUE(report)%%>', htmlspecialchars($row['report'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(report)%%>', urlencode($urow['report']), $templateCode);
		$templateCode=str_replace('<%%VALUE(outcome)%%>', htmlspecialchars($row['outcome'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(outcome)%%>', urlencode($urow['outcome']), $templateCode);
		$templateCode=str_replace('<%%VALUE(indicator)%%>', htmlspecialchars($row['indicator'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(indicator)%%>', urlencode($urow['indicator']), $templateCode);
		$templateCode=str_replace('<%%VALUE(score)%%>', htmlspecialchars($row['score'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(score)%%>', urlencode($urow['score']), $templateCode);
		$templateCode=str_replace('<%%VALUE(beneficiary_group)%%>', htmlspecialchars($row['beneficiary_group'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(beneficiary_group)%%>', urlencode($urow['beneficiary_group']), $templateCode);
		$templateCode=str_replace('<%%VALUE(beneficiary_group_relevance)%%>', htmlspecialchars($row['beneficiary_group_relevance'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(beneficiary_group_relevance)%%>', urlencode($urow['beneficiary_group_relevance']), $templateCode);
		if($dvprint){
			$templateCode = str_replace('<%%VALUE(comment)%%>', nl2br(htmlspecialchars($row['comment'], ENT_QUOTES)), $templateCode);
		}else{
			$templateCode = str_replace('<%%VALUE(comment)%%>', htmlspecialchars($row['comment'], ENT_QUOTES), $templateCode);
		}
		$templateCode=str_replace('<%%URLVALUE(comment)%%>', urlencode($urow['comment']), $templateCode);
		$templateCode=str_replace('<%%VALUE(reference)%%>', htmlspecialchars($row['reference'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(reference)%%>', urlencode($urow['reference']), $templateCode);
		$templateCode=str_replace('<%%VALUE(reliability)%%>', htmlspecialchars($row['reliability'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(reliability)%%>', urlencode($urow['reliability']), $templateCode);
		$templateCode=str_replace('<%%VALUE(intentionality)%%>', htmlspecialchars($row['intentionality'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(intentionality)%%>', urlencode($urow['intentionality']), $templateCode);
		$templateCode=str_replace('<%%VALUE(equivalence)%%>', htmlspecialchars($row['equivalence'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(equivalence)%%>', urlencode($urow['equivalence']), $templateCode);
	}else{
		$templateCode=str_replace('<%%VALUE(entry_id)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(entry_id)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(created)%%>', '<%%creationDate%%>', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(created)%%>', urlencode('<%%creationDate%%>'), $templateCode);
		$templateCode=str_replace('<%%VALUE(created_by)%%>', '<%%creatorUsername%%>', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(created_by)%%>', urlencode('<%%creatorUsername%%>'), $templateCode);
		$templateCode=str_replace('<%%VALUE(report)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(report)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(outcome)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(outcome)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(indicator)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(indicator)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(score)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(score)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(beneficiary_group)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(beneficiary_group)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(beneficiary_group_relevance)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(beneficiary_group_relevance)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(comment)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(comment)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(reference)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(reference)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(reliability)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(reliability)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(intentionality)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(intentionality)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(equivalence)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(equivalence)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode=str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode=str_replace('<%%', '<!-- ', $templateCode);
	$templateCode=str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_POST['dvprint_x']==''){
		$templateCode.="\n\n<script>jQuery(function(){\n";
		$arrTables=getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\tjQuery('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\tjQuery('#xs_{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\tjQuery('[id^=\"{$name}_plink\"]').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode.="<script>";
	$templateCode.="document.observe('dom:loaded', function() {";

	$templateCode.="\toutcome_update_autofills$rnd1 = function(){\n";
	$templateCode.="\t\tnew Ajax.Request(\n";
	if($dvprint){
		$templateCode.="\t\t\t'entries_autofill.php?rnd1=$rnd1&mfk=outcome&id='+encodeURIComponent('".addslashes($row['outcome'])."'),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get'}\n";
	}else{
		$templateCode.="\t\t\t'entries_autofill.php?rnd1=$rnd1&mfk=outcome&id=' + encodeURIComponent(current_outcome{$rnd1}.value),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get', onCreate: function(){ \$('outcome$rnd1').disable(); \$('outcomeLoading').innerHTML='<img src=loading.gif align=top>'; }, onComplete: function(){".(($arrPerm[1] || (($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3)) ? "\$('outcome$rnd1').enable(); " : "\$('outcome$rnd1').disable(); ")."\$('outcomeLoading').innerHTML='';}}\n";
	}
	$templateCode.="\t\t);\n";
	$templateCode.="\t};\n";
	if(!$dvprint) $templateCode.="\tif(\$('outcome_caption') != undefined) \$('outcome_caption').onchange=outcome_update_autofills$rnd1;\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode=preg_replace('/blank.gif" rel="lightbox\[.*?\]"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	// hook: entries_dv
	if(function_exists('entries_dv')){
		$args=array();
		entries_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>